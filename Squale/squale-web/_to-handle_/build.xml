<?xml version="1.0" encoding="ISO-8859-1"?>
<project name="squaleCommons" basedir="." default="aide">

	<!-- lecture du fichier de properties -->
	<property file="${basedir}/build.properties" />
		
	<property name="Sweb.home"      value="." />
	<property name="Scommon.home"	value="${common.dir}" />
	<property name="Squaleear.home" value="${ear.dir}"/>
	<property name="app.nom"        value="squale" />
	<property name="fichier.war"    value="squale.war" />
	<property name="src.web.home"   value="${Sweb.home}/JavaSource"/>
	<property name="src.common.home" value="${Scommon.home}/src" /> 
	<property name="classes.home"   value="${Sweb.home}/.deployables/${app.nom}/WEB-INF/classes"/>
	<property name="lib.home"       value="${Sweb.home}/.deployables/${app.nom}/WEB-INF/lib"/>
	<property name="deploy.home"    value="${Sweb.home}/.deployables"/>
	<property name="doc.home"       value="${Sweb.home}/doc"/>
	<property name="web.home"       value="${Sweb.home}/.deployables/${app.nom}"/>
	
	<property name="src.dir" location="${common.dir}/src"/>
	<property name="classes.dir" value="${basedir}/classes" />
	
	<property name="generated.dir" value="${common.dir}/generated" />
	<property name="generated.ddl.dir" value="${generated.dir}/ddl" />
	<property name="mapping.full.path" value="${src.dir}\mapping" />
	<property name="mapping.short.path" value="/mapping" />
	<property name="config.full.path" value="${web.dir}/WebContent/WEB-INF/config" />
	<property name="config.short.path" value="/config" />
	<property name="hibernate.config.file" value="hibernate.cfg.xml" />
	<property name="schema.export.file" value="schema-export-${type.ext}.sql" />
	
	<!-- classpath du projet --> 
	<path id="project.class.path">
		<pathelement location="${classes.home}"/>
		
		<!-- librairies -->
		<fileset dir="${Sweb.home}/WebContent/WEB-INF/lib">
			<include name="**/*.jar"/>
			<include name="**/*.zip"/>
		</fileset>	
		
	    <!-- Serveur librairies -->
	    <fileset dir="${serveur.librairies1}">
	    	<include name="**/*.jar"/>
	    </fileset>
	    <fileset dir="${serveur.librairies2}">
	    	<include name="**/*.jar"/>
	    </fileset>
		<fileset dir="${serveur.librairies3}">
	    	<include name="**/*.jar"/>
		</fileset>
		
		<!-- Driver JDBC de MySQL librairies -->
	    <fileset dir="${jdbc.home}">
	    	<include name="*-bin.jar"/>
	    </fileset>
		
		<!-- librairies contenues dans l'ear -->
		<fileset dir="${ear.dir}">
			<include name="**/*.jar"/>
		</fileset>
		
		<!-- parser xdoclet -->
		<fileset dir="lib/xdoclet/">
  			<include name="**/*.jar" />
		</fileset>
		
	</path>
	
	<target name="aide" >
		<echo message="Specifier une cible ! [usage: ant &lt;nomCible&gt;]" />
	   	<echo message="Liste des cibles : "/>
		<echo message="  create-mapping.......Création des fichiers maping *.hbm.xml "/>
		<echo message="  hbm2ddl..............Construit le mapping à partir de hibernate.cfg.xml "/>
		<echo message="  copie_hbm.xml........Copie les hbm.xml"/>
		<echo message="  prepare..............Cree les repertoires" />
		<echo message="  compile..............Compile les sources" />
		<echo message="  build................Copie les lib, web.xml, ... et cree le war "/>
		<echo message="  deploy...............Copie le war dans le serveur" />
	</target>
	
	<!-- tache hibernate pour l'exportation de schema de base -->
	<taskdef name="schemaexport"
		classname="net.sf.hibernate.tool.hbm2ddl.SchemaExportTask"
		classpathref="project.class.path"/>

	
	<!-- =================================================================== -->
		<!-- tache de création des fichiers de mapping -->
		<!-- =================================================================== -->
		<target name="create-mapping" depends="">
			<taskdef name="hibernate2" 
				classname="xdoclet.modules.hibernate.HibernateDocletTask" 
				classpathref="project.class.path"/>

			<tstamp>
	        	<format property="TODAY" pattern="d-MM-yy"/>
	    	</tstamp>
	    	
			<!-- Creation du fichier destination -->
			<mkdir dir="${mapping.full.path}"/>
	    	
	    	<hibernate2 force="yes" destDir="${mapping.full.path}"
	    		verbose="true"
	    		excludedtags="@version,@author,@todo"
		    	addedtags="@xdoclet-generated at ${TODAY}"
		    	mergeDir="${mapping.full.path}">
				
	    		<!-- Fichiers à intégrer dans le parsing -->
	    		<fileset dir="${src.dir}">
					<include name="**/*.java" />
				</fileset>

	    		<hibernate version="2.1" validateXML="true"
	            		prefixWithPackageStructure="false"/> 
	    	</hibernate2>
		</target>
	
	
	<!-- construit le mapping dont les fichiers sont precises dans le
		fichier hibernate.cfg.xml
	-->
	
	<target name="hbm2ddl" description="construire le ddl">
		<echo message="mapping.full.path=${mapping.full.path}" />
		<schemaexport 
			config="${config.full.path}/${hibernate.config.file}"
			quiet="no" 
			text="yes"
			drop="no"
			delimiter=";"
			output="${generated.ddl.dir}/${schema.export.file}">
		</schemaexport>
		<echo message="schema.export.file=${schema.export.file}" />
	</target>
	
	<!-- ========== "copie-hbm.xml" ========== 
		Copie les fichiers de mapping hibernate *.hbm.xml et hibernate-cfg.xml
		Ne fait rien si ces fichiers existent deja ! 
	-->
	<target name="copie-hbm.xml">
	    <copy todir="${classes.home}/mapping">
	        <fileset dir="${src.common.home}/mapping">
	            <include name="*.hbm.xml" />
	        </fileset>
	    </copy>
	</target>
    
	<!-- ========== "prepare" ========== 
		Executee en priorite de toutes les autres cibles
		Copie les fichiers de mappings Hibernate dans le repertoire des classes
		Cree les repertoires s'ils n'existent pas
	-->
	<target name="prepare" depends="copie-hbm.xml" >

		<mkdir  dir="${classes.home}"/>
	    <mkdir  dir="${deploy.home}"/>

	    <mkdir  dir="${doc.home}"/>
	    <mkdir  dir="${doc.home}/api"/>

	    <mkdir dir="${lib.home}"/>

	</target>
	
	<!-- ========== "compile" ========== 
		Compile uniquement les .java qui sont plus recent que leur .class
		On pourrait ne pas inclure les informations de deboguage (qui
		apparaissent lors de l'execution)
	-->
	
	<target name="compile" depends="prepare"  >
		<javac srcdir="${src.common.home}" destdir="${classes.home}"  debug="yes" >
			<classpath refid="project.class.path"/>
		</javac>
		<javac srcdir="${src.web.home}" destdir="${classes.home}"  debug="yes" >
			<classpath refid="project.class.path"/>
		</javac>
	</target>
	
	<!-- ========== "build" ========== 
		Copie les fichiers de mapping hibernate *.hbm.xml et hibernate-cfg.xml
		Ne fait rien si ces fichiers existent deja ! 
	-->
	
	<target name="build" depends="compile">
		<!-- Copie les jsp, html, tld, xml, jws, ... -->
	    <copy todir="${web.home}">
	        <fileset dir="${Sweb.home}/WebContent" />
	    </copy>
		
		<!-- Les classes sont deja dans classes.home -->
		
		<!-- copie les fichiers .properties qui vont dans le classpath -->
	    <copy todir="${classes.home}">
	      <fileset dir="${src.web.home}">
	         <include name="**/*.properties" />
	         <include name="**/*.prop" />
	      </fileset>
	    </copy>
		<copy todir="${classes.home}">
	      <fileset dir="${src.common.home}">
	         <include name="**/*.properties" />
	         <include name="**/*.prop" />
	      </fileset>
	    </copy>
		
		<!-- copie les lib -->
        <copy todir="${lib.home}">
            <fileset dir="${Sweb.home}/WebContent/WEB-INF/lib">
                <include name="**/*.jar"/>
            </fileset>
        </copy>
		<copy todir="${lib.home}">
            <fileset dir="${Squaleear.home}">
                <include name="**/*.jar"/>
            </fileset>
		</copy>
		
		
		<!-- copie le driver JDBC -->
        <copy todir="${lib.home}">
            <fileset dir="${jdbc.home}">
                <include name="*bin.jar"/>
            </fileset>
        </copy>
			
		<!-- copie le web.xml -->	
		<copy file="${Sweb.home}/WebContent/WEB-INF/web.xml" 
			tofile="${web.home}/WEB-INF/web.xml" overwrite="yes" />
			
		<!-- Cree le fichier war  -->
	    <!--<jar jarfile="${deploy.home}/${fichier.war}"
	    	basedir="${web.home}"/>-->
		
	</target>
	
	
	<!-- ========== "deploy" ========== 
		Copie le fichier war dans serveur.deploy.dir
	-->
	
	<target name="deploy">
		
		<copy todir="${serveur.deploy.dir}/${fichier.war}/" overwrite="yes">
			<fileset dir="${deploy.home}/${app.nom}/">
				<include name="**/*.*"/>
			</fileset>
		</copy>
		
	</target>
	
	<target name="all" depends="build, deploy"/>
 
</project>
